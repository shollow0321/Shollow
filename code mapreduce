import java.io.IOException;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import    org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;   

public class ElectricityConsumption {

    public static class ElectricityMapper extends Mapper<Object, Text, Text, IntWritable> {

        private final static IntWritable one = new IntWritable(1);
        private Text year = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException    {
            // Giả sử dữ liệu đầu vào có dạng: "2023, 25" (năm, tiêu thụ điện)
            String[] fields = value.toString().split(",");
            if (fields.length == 2) {
                year.set(fields[0]);
                int consumption = Integer.parseInt(fields[1]);
                context.write(year, new IntWritable(consumption));
            }
        }
    }

    public static class ElectricityReducer extends Reducer<Text, IntWritable, Text, IntWritable> {

        private final static int MAX_CONSUMPTION = 30;

        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int sum    = 0;
            int count = 0;
            for (IntWritable val : values) {
                sum += val.get();
                count++;
            }
            double    average = (double) sum / count;
            if (average > MAX_CONSUMPTION) {
                context.write(key, new IntWritable((int) average));
            }
        }
    }

    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("Usage: ElectricityConsumption <input path> <output path>");
            System.exit(-1);
        }

        Job job = new Job();
        job.setJarByClass(ElectricityConsumption.class);
        job.setJobName("Electricity Consumption");

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        job.setMapperClass(ElectricityMapper.class);   
        job.setReducerClass(ElectricityReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        System.exit(job.waitForCompletion(true)    ? 0 : 1);
    }
}
