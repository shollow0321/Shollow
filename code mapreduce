import java.io.IOException;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import   
 org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;   


public class ElectricityConsumptionImproved {

    public static class ElectricityMapper extends Mapper<Object, Text, Text, IntWritable> {
        // ... (giữ nguyên phần Mapper như trước)
    }

    public static class ElectricityReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        private int maxConsumption;

        public void setup(Context context) {
            maxConsumption = context.getConfiguration().getInt("max.consumption", 30);
        }

        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            // ... (giữ nguyên phần tính toán trung bình)
            if (average > maxConsumption) {
                context.write(key, new IntWritable((int) average));
            }
        }
    }

    public static void main(String[] args) throws Exception {
        if (args.length != 3) {
            System.err.println("Usage: ElectricityConsumptionImproved <input path> <output path> <max consumption>");
            System.exit(-1);
        }

        Job job = new Job();
        job.setJarByClass(ElectricityConsumptionImproved.class);
        job.setJobName("Electricity Consumption Improved");

        // ... (cấu hình job như trước)

        job.getConfiguration().setInt("max.consumption", Integer.parseInt(args[2]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
